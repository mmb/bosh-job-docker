#!/usr/bin/env ruby
# encoding: UTF-8

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '..', 'lib')

require 'bosh_job_docker/docker_file'
require 'bosh_job_docker/release_tarball'

require 'fileutils'
require 'logger'

if ARGV.size != 2
  $stderr.puts "Usage: #{$PROGRAM_NAME} release_tarball job_name"
  exit 1
end

release_tarball_path, job = ARGV

release_tarball = BoshJobDocker::ReleaseTarball.new(release_tarball_path)

logger = Logger.new($stdout)
logger.info("Building job #{job} from #{release_tarball}")

build_order = release_tarball.build_order(job)
logger.info("Package build order: #{build_order}")

work_dir = "./#{job}-docker"
FileUtils.rm_rf(work_dir)
logger.info("Cleaning #{work_dir}")
FileUtils.mkdir(work_dir)

build_dir = FileUtils.mkdir_p(File.join(work_dir, 'build'))

docker_file = BoshDockerJob::DockerFile.new
vcap_packages = '/var/vcap/packages'

docker_file.from('ubuntu')
docker_file.run('apt-get update')
docker_file.apt_get(%w(
  build-essential
  cmake
  libbz2-dev
  libcap-dev
  libreadline-dev
  libssl-dev
  libxml2-dev
  libxslt1-dev
  zlib1g-dev
))

docker_file.add('build', '/build')
docker_file.run("mkdir -p #{vcap_packages}")
docker_file.blank_line

build_order.each do |package|
  logger.info("Building package #{package}")
  package_build_dir = File.join(build_dir, package)
  release_tarball.extract_package(package, package_build_dir)

  docker_file.comment(package)
  docker_file.env('BOSH_INSTALL_TARGET', "#{vcap_packages}/#{package}")
  docker_file.run('mkdir $BOSH_INSTALL_TARGET')
  docker_file.run("cd /build/#{package} && bash packaging")
  docker_file.blank_line
end

docker_file.write(File.join(work_dir, 'Dockerfile'))
logger.info("Dockerfile written to #{work_dir}")
